/**
 * This class is generated by jOOQ
 */
package models.jooq.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import models.jooq.Keys
import models.jooq.Public
import models.jooq.tables.records.AuthorRecord

import org.jooq.Field
import org.jooq.Identity
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl


object Author {

	/**
	 * The reference instance of <code>public.author</code>
	 */
	val AUTHOR = new Author
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	),
	comments = "This class is generated by jOOQ"
)
class Author(alias : String, aliased : Table[AuthorRecord], parameters : Array[ Field[_] ]) extends TableImpl[AuthorRecord](alias, Public.PUBLIC, aliased, parameters, "") {

	/**
	 * The class holding records for this type
	 */
	override def getRecordType : Class[AuthorRecord] = {
		classOf[AuthorRecord]
	}

	/**
	 * The column <code>public.author.id</code>.
	 */
	val ID : TableField[AuthorRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), "")

	/**
	 * The column <code>public.author.firstname</code>.
	 */
	val FIRSTNAME : TableField[AuthorRecord, String] = createField("firstname", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

	/**
	 * The column <code>public.author.lastname</code>.
	 */
	val LASTNAME : TableField[AuthorRecord, String] = createField("lastname", org.jooq.impl.SQLDataType.CLOB, "")

	/**
	 * Create a <code>public.author</code> table reference
	 */
	def this() = {
		this("author", null, null)
	}

	/**
	 * Create an aliased <code>public.author</code> table reference
	 */
	def this(alias : String) = {
		this(alias, models.jooq.tables.Author.AUTHOR, null)
	}

	private def this(alias : String, aliased : Table[AuthorRecord]) = {
		this(alias, aliased, null)
	}

	override def getIdentity : Identity[AuthorRecord, Integer] = {
		Keys.IDENTITY_AUTHOR
	}

	override def getPrimaryKey : UniqueKey[AuthorRecord] = {
		Keys.AUTHOR_PKEY
	}

	override def getKeys : List[ UniqueKey[AuthorRecord] ] = {
		return Arrays.asList[ UniqueKey[AuthorRecord] ](Keys.AUTHOR_PKEY)
	}

	override def as(alias : String) : Author = {
		new Author(alias, this)
	}

	/**
	 * Rename this table
	 */
	def rename(name : String) : Author = {
		new Author(name, null)
	}
}

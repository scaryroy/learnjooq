/**
 * This class is generated by jOOQ
 */
package models.jooq.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import models.jooq.tables.Author

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	),
	comments = "This class is generated by jOOQ"
)
class AuthorRecord extends UpdatableRecordImpl[AuthorRecord](Author.AUTHOR) with Record3[Integer, String, String] {

	/**
	 * Setter for <code>public.author.id</code>.
	 */
	def setId(value : Integer) : Unit = {
		setValue(0, value)
	}

	/**
	 * Getter for <code>public.author.id</code>.
	 */
	def getId : Integer = {
		val r = getValue(0)
		if (r == null) null else r.asInstanceOf[Integer]
	}

	/**
	 * Setter for <code>public.author.firstname</code>.
	 */
	def setFirstname(value : String) : Unit = {
		setValue(1, value)
	}

	/**
	 * Getter for <code>public.author.firstname</code>.
	 */
	def getFirstname : String = {
		val r = getValue(1)
		if (r == null) null else r.asInstanceOf[String]
	}

	/**
	 * Setter for <code>public.author.lastname</code>.
	 */
	def setLastname(value : String) : Unit = {
		setValue(2, value)
	}

	/**
	 * Getter for <code>public.author.lastname</code>.
	 */
	def getLastname : String = {
		val r = getValue(2)
		if (r == null) null else r.asInstanceOf[String]
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------
	override def key() : Record1[Integer] = {
		return super.key.asInstanceOf[ Record1[Integer] ]
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	override def fieldsRow : Row3[Integer, String, String] = {
		super.fieldsRow.asInstanceOf[ Row3[Integer, String, String] ]
	}

	override def valuesRow : Row3[Integer, String, String] = {
		super.valuesRow.asInstanceOf[ Row3[Integer, String, String] ]
	}
	override def field1 : Field[Integer] = Author.AUTHOR.ID
	override def field2 : Field[String] = Author.AUTHOR.FIRSTNAME
	override def field3 : Field[String] = Author.AUTHOR.LASTNAME
	override def value1 : Integer = getId
	override def value2 : String = getFirstname
	override def value3 : String = getLastname

	override def value1(value : Integer) : AuthorRecord = {
		setId(value)
		this
	}

	override def value2(value : String) : AuthorRecord = {
		setFirstname(value)
		this
	}

	override def value3(value : String) : AuthorRecord = {
		setLastname(value)
		this
	}

	override def values(value1 : Integer, value2 : String, value3 : String) : AuthorRecord = {
		this.value1(value1)
		this.value2(value2)
		this.value3(value3)
		this
	}

	/**
	 * Create a detached, initialised AuthorRecord
	 */
	def this(id : Integer, firstname : String, lastname : String) = {
		this()

		setValue(0, id)
		setValue(1, firstname)
		setValue(2, lastname)
	}
}

/**
 * This class is generated by jOOQ
 */
package models.jooq


import java.lang.Integer

import javax.annotation.Generated

import models.jooq.tables.Author
import models.jooq.tables.records.AuthorRecord

import org.jooq.Identity
import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys


/**
 * A class modelling foreign key relationships between tables of the <code>public</code> 
 * schema
 */
@Generated(
	value = Array(
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	),
	comments = "This class is generated by jOOQ"
)
object Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	val IDENTITY_AUTHOR = Identities0.IDENTITY_AUTHOR

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	val AUTHOR_PKEY = UniqueKeys0.AUTHOR_PKEY

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private object Identities0 extends AbstractKeys {
		val IDENTITY_AUTHOR : Identity[AuthorRecord, Integer] = AbstractKeys.createIdentity(Author.AUTHOR, Author.AUTHOR.ID)
	}

	private object UniqueKeys0 extends AbstractKeys {
		val AUTHOR_PKEY : UniqueKey[AuthorRecord] = AbstractKeys.createUniqueKey(Author.AUTHOR, Author.AUTHOR.ID)
	}
}
